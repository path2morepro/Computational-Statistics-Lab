#     est_list = c(est_list, mean(a, b))
#   }
#   return(est_list)
# }
#
# secant = function(start, threhold){
#   xt1_list = c()
#   for(x0 in start){
#     xt = x0
#     xt_1 = x0 - threhold
#     while(TRUE){
#       xt1 = xt - dg(xt) / estimate_d2g(xt, xt_1)
#       if (abs(xt1 - xt) < threhold){
#         break
#       }
#       xt_1 = xt
#       xt = xt1
#     }
#     xt1_list = c(x1_list, xt1)
#   }
#   return(xt1_list)
bisection = function(a = 0.8, intervals, threshold) {
est_list = vector("list", length(intervals))
for (i in seq_along(intervals)) {
b = a + intervals[i]
mid = (a + b) / 2
while (abs(a - b) > threshold) {
xt = (a + b) / 2
dgxt = dg(xt)
dga = dg(a)
dgb = dg(b)
if (dga * dgxt <= 0) {
b = xt
} else if (dgb * dgxt < 0) {
a = xt
}
if (abs(a - b) <= threshold) break
}
est_list[[i]] = (a + b) / 2
}
return(unlist(est_list))
}
secant = function(start, threshold) {
xt1_list = vector("list", length(start))
for (x0 in start) {
xt = x0
xt_1 = x0 - threshold
while (TRUE) {
dxt = dg(xt)
dxt_1 = estimate_d2g(xt, xt_1)
if (is.na(dxt) || is.na(dxt_1) || dxt_1 == 0) {
print(xt)
print(xt1)
print(dxt)
print(dxt_1)
break
}
xt1 = xt - dg(xt) / estimate_d2g(xt, xt_1)
if (abs(xt1 - xt) < threshold) {
break
}
xt_1 = xt
xt = xt1
}
xt1_list[[which(start == x0)]] = xt
}
return(unlist(xt1_list))
}
x = seq(from = 0, to = 4, by = 0.01)
gx = g(x)
plot(x=x, y=gx, type="l", col = "red",lwd = 5)
# points(x=est_secant, y=g(est_secant))
plot(x=x, y=dg(x), type = "l", col = "blue",lwd = 5)
abline(a = 0, b = 0, lwd = 3, lty = 3)
# points(x=est_secant, y=dg(est_secant))
intervals = seq(from = 0.2, to = 2, by = 0.1)
start = seq(from = 0.2, to = 2, by = 0.1)
est_bisection = bisection(intervals = intervals, threshold = 0.01)
est_secant = secant(start = start, threshold = 0.01)
dg(-0.2563632)
x = -0.256363
1/(x+1)
x ^ 1.5 + 1
x^1.5
sqrt(x ^ 3)
x ^ 3
intervals = seq(from = 0.2, to = 2, by = 0.1)
start = seq(from = 0.2, to = 2, by = 0.1)
est_bisection = bisection(intervals = intervals, threshold = 0.01)
est_secant = secant(start = start, threshold = 0.01)
g = function(x){
gx = log(x + 1) / x ^ 1.5 + 1
return(gx)
}
dg = function(x){
dux = 1 / (x+1)
ux = log(x+1)
dvx = 1.5 * sqrt(x)
vx = x ^ 1.5 + 1
dg = (dux*vx - dvx*ux) / (vx) ^ 2
return(dg)
}
estimate_d2g = function(xt, xt_1){
return((dg(xt) - dg(xt_1)) / (xt - xt_1))
}
# bisection = function(a=0.5, intervals, threhold){
#   est_list = c()
#   for(i in intervals){
#     b = a + i
#     while(abs(a - b) > threhold){
#       xt = mean(c(a, b))
#       dgxt = dg(xt)
#       dga = dg(a)
#       dgb = dg(b)
#
#       if(dga * dgxt <= 0){
#         b = xt
#       }
#       else if (dgb * dgxt < 0){
#         a = xt
#       }
#     }
#     est_list = c(est_list, mean(a, b))
#   }
#   return(est_list)
# }
#
# secant = function(start, threhold){
#   xt1_list = c()
#   for(x0 in start){
#     xt = x0
#     xt_1 = x0 - threhold
#     while(TRUE){
#       xt1 = xt - dg(xt) / estimate_d2g(xt, xt_1)
#       if (abs(xt1 - xt) < threhold){
#         break
#       }
#       xt_1 = xt
#       xt = xt1
#     }
#     xt1_list = c(x1_list, xt1)
#   }
#   return(xt1_list)
bisection = function(a = 0.8, intervals, threshold) {
est_list = vector("list", length(intervals))
for (i in seq_along(intervals)) {
b = a + intervals[i]
mid = (a + b) / 2
while (abs(a - b) > threshold) {
xt = (a + b) / 2
dgxt = dg(xt)
dga = dg(a)
dgb = dg(b)
if (dga * dgxt <= 0) {
b = xt
} else if (dgb * dgxt < 0) {
a = xt
}
if (abs(a - b) <= threshold) break
}
est_list[[i]] = (a + b) / 2
}
return(unlist(est_list))
}
secant = function(start, threshold) {
xt1_list = vector("list", length(start))
for (x0 in start) {
xt = x0
xt_1 = x0 - threshold
while (TRUE) {
dxt = dg(xt)
dxt_1 = estimate_d2g(xt, xt_1)
if (is.na(dxt) || is.na(dxt_1) || dxt_1 == 0) {
print(x0)
print(xt)
print(xt1)
print(dxt)
print(dxt_1)
break
}
xt1 = xt - dg(xt) / estimate_d2g(xt, xt_1)
if (abs(xt1 - xt) < threshold) {
break
}
xt_1 = xt
xt = xt1
}
xt1_list[[which(start == x0)]] = xt
}
return(unlist(xt1_list))
}
intervals = seq(from = 0.2, to = 2, by = 0.1)
start = seq(from = 0.2, to = 2, by = 0.1)
est_bisection = bisection(intervals = intervals, threshold = 0.01)
est_secant = secant(start = start, threshold = 0.01)
intervals = seq(from = 0.2, to = 2, by = 0.1)
start = seq(from = 0.2, to = 2, by = 0.01)
est_bisection = bisection(intervals = intervals, threshold = 0.01)
est_secant = secant(start = start, threshold = 0.01)
intervals = seq(from = 0.2, to = 2, by = 0.1)
start = seq(from = 0.2, to = 2, by = 0.001)
est_bisection = bisection(intervals = intervals, threshold = 0.01)
est_secant = secant(start = start, threshold = 0.01)
g = function(x){
gx = log(x + 1) / x ^ 1.5 + 1
return(gx)
}
dg = function(x){
dux = 1 / (x+1)
ux = log(x+1)
dvx = 1.5 * sqrt(x)
vx = x ^ 1.5 + 1
dg = (dux*vx - dvx*ux) / (vx) ^ 2
return(dg)
}
estimate_d2g = function(xt, xt_1){
return((dg(xt) - dg(xt_1)) / (xt - xt_1))
}
# bisection = function(a=0.5, intervals, threhold){
#   est_list = c()
#   for(i in intervals){
#     b = a + i
#     while(abs(a - b) > threhold){
#       xt = mean(c(a, b))
#       dgxt = dg(xt)
#       dga = dg(a)
#       dgb = dg(b)
#
#       if(dga * dgxt <= 0){
#         b = xt
#       }
#       else if (dgb * dgxt < 0){
#         a = xt
#       }
#     }
#     est_list = c(est_list, mean(a, b))
#   }
#   return(est_list)
# }
#
# secant = function(start, threhold){
#   xt1_list = c()
#   for(x0 in start){
#     xt = x0
#     xt_1 = x0 - threhold
#     while(TRUE){
#       xt1 = xt - dg(xt) / estimate_d2g(xt, xt_1)
#       if (abs(xt1 - xt) < threhold){
#         break
#       }
#       xt_1 = xt
#       xt = xt1
#     }
#     xt1_list = c(x1_list, xt1)
#   }
#   return(xt1_list)
bisection = function(a = 0.8, intervals, threshold) {
est_list = vector("list", length(intervals))
for (i in seq_along(intervals)) {
b = a + intervals[i]
mid = (a + b) / 2
while (abs(a - b) > threshold) {
xt = (a + b) / 2
dgxt = dg(xt)
dga = dg(a)
dgb = dg(b)
if (dga * dgxt <= 0) {
b = xt
} else if (dgb * dgxt < 0) {
a = xt
}
if (abs(a - b) <= threshold) break
}
est_list[[i]] = (a + b) / 2
}
return(unlist(est_list))
}
secant = function(start, threshold) {
xt1_list = vector("list", length(start))
for (x0 in start) {
xt = x0
xt_1 = x0 - threshold
while (TRUE) {
if(xt < 0){
print("xt is less than 0")
break
}
xt1 = xt - dg(xt) / estimate_d2g(xt, xt_1)
if (abs(xt1 - xt) < threshold) {
break
}
xt_1 = xt
xt = xt1
}
xt1_list[[which(start == x0)]] = xt
}
return(unlist(xt1_list))
}
intervals = seq(from = 0.2, to = 2, by = 0.1)
start = seq(from = 0.2, to = 2, by = 0.001)
est_bisection = bisection(intervals = intervals, threshold = 0.01)
est_secant = secant(start = start, threshold = 0.01)
intervals = seq(from = 0.2, to = 2, by = 0.1)
start = seq(from = 0.2, to = 1.3, by = 0.001)
est_bisection = bisection(intervals = intervals, threshold = 0.01)
est_secant = secant(start = start, threshold = 0.01)
est_secant
intervals = seq(from = 0.2, to = 2, by = 0.1)
start = seq(from = 0.2, to = 1.3, by = 0.01)
est_bisection = bisection(intervals = intervals, threshold = 0.01)
est_secant = secant(start = start, threshold = 0.01)
est_secant
debug(secant)
secant(start = 1.467, threshold = 0.001)
g = function(x){
gx = log(x + 1) / x ^ 1.5 + 1
return(gx)
}
dg = function(x){
dux = 1 / (x+1)
ux = log(x+1)
dvx = 1.5 * sqrt(x)
vx = x ^ 1.5 + 1
dg = (dux*vx - dvx*ux) / (vx) ^ 2
return(dg)
}
estimate_d2g = function(xt, xt_1){
return((dg(xt) - dg(xt_1)) / (xt - xt_1))
}
bisection = function(a = 0.8, intervals, threshold) {
est_list = vector("list", length(intervals))
for (i in seq_along(intervals)) {
b = a + intervals[i]
mid = (a + b) / 2
while (abs(a - b) > threshold) {
xt = (a + b) / 2
dgxt = dg(xt)
dga = dg(a)
dgb = dg(b)
if (dga * dgxt <= 0) {
b = xt
} else if (dgb * dgxt < 0) {
a = xt
}
if (abs(a - b) <= threshold) break
}
est_list[[i]] = (a + b) / 2
}
return(unlist(est_list))
}
secant = function(start, threshold) {
xt1_list = vector("list", length(start))
for (x0 in start) {
xt = x0
xt_1 = x0 - threshold
while (TRUE) {
if(xt < 0){
print("xt is less than 0")
break
}
xt1 = xt - dg(xt) / estimate_d2g(xt, xt_1)
if (abs(xt1 - xt) < threshold) {
break
}
xt_1 = xt
xt = xt1
}
xt1_list[[which(start == x0)]] = xt
}
return(unlist(xt1_list))
}
debug(secant)
secant(start = 1.467, threshold = 0.001)
dg(xt)
dg(xt_1)
dg(xt_1) - dg(xt)
secant(start = 1.467, threshold = 0.001)
g(xt)
g(xt_1)
dg(xt)
estimate_d2g(xt, xt_1)
g = function(x){
gx = log(x + 1) / x ^ 1.5 + 1
return(gx)
}
dg = function(x){
dux = 1 / (x+1)
ux = log(x+1)
dvx = 1.5 * sqrt(x)
vx = x ^ 1.5 + 1
dg = (dux*vx - dvx*ux) / (vx) ^ 2
return(dg)
}
estimate_d2g = function(xt, xt_1){
return((dg(xt) - dg(xt_1)) / (xt - xt_1))
}
bisection = function(a = 0.8, intervals, threshold) {
est_list = vector("list", length(intervals))
for (i in seq_along(intervals)) {
b = a + intervals[i]
mid = (a + b) / 2
while (abs(a - b) > threshold) {
xt = (a + b) / 2
dgxt = dg(xt)
dga = dg(a)
dgb = dg(b)
if (dga * dgxt <= 0) {
b = xt
} else if (dgb * dgxt < 0) {
a = xt
}
if (abs(a - b) <= threshold) break
}
est_list[[i]] = (a + b) / 2
}
return(unlist(est_list))
}
secant = function(start, threshold) {
xt1_list = vector("list", length(start))
for (x0 in start) {
xt = x0
xt_1 = x0 - threshold
while (TRUE) {
if(estimate_d2g(xt, xt_1) < 0){
print("second order derivatives is less than 0")
break
}
xt1 = xt - dg(xt) / estimate_d2g(xt, xt_1)
if (abs(xt1 - xt) < threshold) {
break
}
xt_1 = xt
xt = xt1
}
xt1_list[[which(start == x0)]] = xt
}
return(unlist(xt1_list))
}
intervals = seq(from = 0.2, to = 2, by = 0.1)
start = seq(from = 0.2, to = 1.3, by = 0.01)
est_bisection = bisection(intervals = intervals, threshold = 0.01)
est_secant = secant(start = start, threshold = 0.01)
g = function(x){
gx = log(x + 1) / x ^ 1.5 + 1
return(gx)
}
dg = function(x){
dux = 1 / (x+1)
ux = log(x+1)
dvx = 1.5 * sqrt(x)
vx = x ^ 1.5 + 1
dg = (dux*vx - dvx*ux) / (vx) ^ 2
return(dg)
}
estimate_d2g = function(xt, xt_1){
return((dg(xt) - dg(xt_1)) / (xt - xt_1))
}
bisection = function(a = 0.8, intervals, threshold) {
est_list = vector("list", length(intervals))
for (i in seq_along(intervals)) {
b = a + intervals[i]
mid = (a + b) / 2
while (abs(a - b) > threshold) {
xt = (a + b) / 2
dgxt = dg(xt)
dga = dg(a)
dgb = dg(b)
if (dga * dgxt <= 0) {
b = xt
} else if (dgb * dgxt < 0) {
a = xt
}
if (abs(a - b) <= threshold) break
}
est_list[[i]] = (a + b) / 2
}
return(unlist(est_list))
}
secant = function(start, threshold) {
xt1_list = vector("list", length(start))
for (x0 in start) {
xt = x0
xt_1 = x0 - threshold
while (TRUE) {
if(xt < 0){
print("second order derivatives is less than 0")
break
}
xt1 = xt - dg(xt) / estimate_d2g(xt, xt_1)
if (abs(xt1 - xt) < threshold) {
break
}
xt_1 = xt
xt = xt1
}
xt1_list[[which(start == x0)]] = xt
}
return(unlist(xt1_list))
}
intervals = seq(from = 0.2, to = 2, by = 0.1)
start = seq(from = 0.2, to = 1.3, by = 0.01)
est_bisection = bisection(intervals = intervals, threshold = 0.01)
est_secant = secant(start = start, threshold = 0.01)
debug(secant)
secant(start = 1.467, threshold = 0.001)
dg(xt) / estimate_d2g(xt, xt_1)
estimate_d2g(xt, xt_1)
dg(xt)
x = 1.4
estimate_d2g(x, x-0.01)
dg(x)
dg(x) / estimate_d2g(x, x-0.01)
