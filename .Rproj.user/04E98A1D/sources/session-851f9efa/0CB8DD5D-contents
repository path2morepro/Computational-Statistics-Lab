---
title: "Univariate Optimization"
author: "Cui Qingxuan"
date: "`r Sys.Date()`"
output: pdf_document
---


```{r}
# Example function to be maximized
g <- function(x){
  co <- sqrt(2)/4
  1/sqrt(2*3.141592) * exp(-(x-co)^2/2)
  # Gaussian Function
}
# First derivative
dg <- function(x){
  co <- sqrt(2)/4
  -(x-co)/sqrt(2*3.141592) * exp(-(x-co)^2/2)
}
# Second derivative
d2g <- function(x){
  co <- sqrt(2)/4
  (-1+(x-co)^2)/sqrt(2*3.141592) * exp(-(x-co)^2/2)
}

# Newton function
# x0 in function-call is starting value
# with graphical output
newton <- function(x0, eps=0.0001){
  xt  <- x0
  xt1 <- x0 + 2  # xt1 is x(t-1); starting value here just to ensure that while-condition is met 
  xt_list = c()
  while(abs(xt-xt1)>eps)
  {
    xt1 <- xt
    xt  <- xt1 - dg(xt1)/d2g(xt1)
    print(xt)   # iteration output
    xt_list= c(xt_list, xt)
  }
  xt_list
}
```


```{r}
xs   <- -0.3  # starting value - test other values and check what happens
xmax <- newton(xs)

# graphical output
xv <- seq(-4, 4, by=0.01)
plot(xv, g(xv), type="l", xlab="x", ylab="g(x)")
points(xs, g(xs), col=2, pch=4, lwd=3)      # starting value in plot
points(xmax, g(xmax), col=4, pch=4, lwd=3)  # result in plot

plot(xv, dg(xv), type="l", xlab="x", ylab="g'(x)")
abline(h=0)
points(xs, dg(xs), col=4, pch=4, lwd=3)      
points(xmax, dg(xmax), col=4, pch=4, lwd=3)  
min_d2g = xs[which.min(dg(xs))]
max_d2g = xs[which.max(dg(xs))]
```
```{r}
biscant = function(a, b){
  
  while(abs(a - b) > 0.001){
    xt = mean(c(a,b))
    gxt = dg(xt)
    ga = dg(a)
    gb = dg(b)
    
    if(ga*gxt <= 0){
      b = xt
    }
    else if(gb*gxt < 0){
      a = xt
    }
    print(c(a,b))
  }
  return(mean(c(a,b)))
}
biscant(a = -2, b = 2)

```


